var searchIndex = {};
searchIndex["compare"] = {"doc":"Comparators.","items":[[3,"Borrowing","compare","A comparator that borrows its parameters before comparing them.",null,null],[3,"Extract","","A comparator that extracts a sort key from a value.",null,null],[3,"Then","","A comparator that [lexicographically]\n(https://en.wikipedia.org/wiki/Lexicographical_order) combines two others.",null,null],[3,"Natural","","A comparator that delegates to [`Ord`]\n(http://doc.rust-lang.org/std/cmp/trait.Ord.html).",null,null],[3,"Rev","","A comparator that reverses the ordering of another.",null,null],[3,"Swap","","A comparator that swaps another&#39;s parameters, maintaining the underlying ordering.",null,null],[5,"max","","Returns the maximum of two values according to the given comparator, or `r` if they\nare equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"min","","Returns the minimum of two values according to the given comparator, or `l` if they\nare equal.",null,{"inputs":[{"name":"c"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"natural","","Returns a comparator that delegates to `Ord`.",null,{"inputs":[],"output":{"name":"natural"}}],[8,"Compare","","A comparator imposing a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"compare","","Compares two values, returning `Less`, `Equal`, or `Greater` if `l` is less\nthan, equal to, or greater than `r`, respectively.",0,null],[11,"compares_lt","","Checks if `l` is less than `r`.",0,null],[11,"compares_le","","Checks if `l` is less than or equal to `r`.",0,null],[11,"compares_ge","","Checks if `l` is greater than or equal to `r`.",0,null],[11,"compares_gt","","Checks if `l` is greater than `r`.",0,null],[11,"compares_eq","","Checks if `l` is equal to `r`.",0,null],[11,"compares_ne","","Checks if `l` is not equal to `r`.",0,null],[11,"borrowing","","Borrows the comparator&#39;s parameters before comparing them.",0,null],[11,"rev","","Reverses the ordering of the comparator.",0,null],[11,"swap","","Swaps the comparator&#39;s parameters, maintaining the underlying ordering.",0,null],[11,"then","","[Lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order) combines\nthe comparator with another.",0,null],[11,"compare","","",1,null],[11,"compares_lt","","",1,null],[11,"compares_le","","",1,null],[11,"compares_ge","","",1,null],[11,"compares_gt","","",1,null],[11,"compares_eq","","",1,null],[11,"compares_ne","","",1,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"extract"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"new","","Returns a comparator that extracts a sort key using `ext` and compares it according to its\nnatural ordering.",2,{"inputs":[{"name":"e"}],"output":{"name":"self"}}],[11,"with_cmp","","Returns a comparator that extracts a sort key using `ext` and compares it using\n`cmp`.",2,{"inputs":[{"name":"e"},{"name":"c"}],"output":{"name":"self"}}],[11,"compare","","",2,null],[11,"compares_lt","","",2,null],[11,"compares_le","","",2,null],[11,"compares_ge","","",2,null],[11,"compares_gt","","",2,null],[11,"compares_eq","","",2,null],[11,"compares_ne","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"then"}}],[11,"clone","","",3,null],[11,"compare","","",3,null],[11,"compare","","",4,null],[11,"compares_lt","","",4,null],[11,"compares_le","","",4,null],[11,"compares_ge","","",4,null],[11,"compares_gt","","",4,null],[11,"compares_eq","","",4,null],[11,"compares_ne","","",4,null],[11,"clone","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"rev"}}],[11,"clone","","",5,null],[11,"compare","","",5,null],[11,"compares_lt","","",5,null],[11,"compares_le","","",5,null],[11,"compares_ge","","",5,null],[11,"compares_gt","","",5,null],[11,"compares_eq","","",5,null],[11,"compares_ne","","",5,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"swap"}}],[11,"clone","","",6,null],[11,"compare","","",6,null],[11,"compares_lt","","",6,null],[11,"compares_le","","",6,null],[11,"compares_ge","","",6,null],[11,"compares_gt","","",6,null],[11,"compares_eq","","",6,null],[11,"compares_ne","","",6,null]],"paths":[[8,"Compare"],[3,"Borrowing"],[3,"Extract"],[3,"Then"],[3,"Natural"],[3,"Rev"],[3,"Swap"]]};
initSearch(searchIndex);
